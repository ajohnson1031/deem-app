generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String              @id @default(cuid())
  username           String              @unique
  name               String
  email              String?             @unique
  phoneNumber        String?             @unique
  password           String
  avatarUrl          String?
  walletAddress      String              @unique
  countryCode        String?             @default("US")
  callingCode        String?             @default("1")
  wallet             Wallet?             @relation("UserToWallet")
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  contacts           Contact[]           @relation("UserContacts")
  transactions       Transaction[]       @relation("UserTransactions")
  refreshTokens      RefreshToken[]      @relation("UserRefreshTokens")
  passwordResetCodes PasswordResetCode[] @relation("UserPasswordResets")
}

model PasswordResetCode {
  id        String   @id @default(cuid())
  userId    String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation("UserPasswordResets", fields: [userId], references: [id])

  @@index([userId])
}

model Wallet {
  id            String   @id @default(cuid())
  encryptedSeed String
  userId        String   @unique
  user          User     @relation("UserToWallet", fields: [userId], references: [id])
  createdAt     DateTime @default(now())
}

model Contact {
  id            String   @id @default(cuid())
  userId        String
  name          String
  username      String
  avatarUrl     String?
  walletAddress String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // ðŸ‘‡ Match relation name here
  user User @relation("UserContacts", fields: [userId], references: [id])
}

model Transaction {
  id                        String   @id @default(cuid())
  type                      String
  direction                 String
  amount                    String
  currency                  String?  @default("XRP")
  feeAmount                 String?
  feeInXrp                  String?
  originalAmount            String?
  feeIncluded               Boolean? @default(false)
  memo                      String?
  status                    String
  createdAt                 DateTime @default(now())
  hash                      String?
  ledgerIndex               Int?
  destinationTag            Int?
  deliveredAmount           String?
  conversionRateAtExecution Float?
  xrplTimestamp             Int?
  timestamps                Json?

  userId String

  // ðŸ‘‡ Match relation name here
  user User @relation("UserTransactions", fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation("UserRefreshTokens", fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime

  @@index([userId])
}
